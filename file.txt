Reproducible Research Peer Assessment #1
===============
##Downloading and Loading the Data

This is the code to download the data and load it into the variable "data."

```{r download_and_mean}
#Reproducible Research, Project 1
#Download Data
library(downloader)
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download(url, dest="activity dataset.zip", mode="wb")
unzip("activity dataset.zip")
data <- read.csv("activity.csv")
print("Sweet, the data is downloaded, unzipped, and is in your working directory.")
```


Preprocess the data by creating three new dataframes.  One will be for steps per day, one for total steps per interval, and one for mean steps per interval.
```{r}
#change date column from factor to date format
data$date <- as.Date(data$date)

#create a dataframe for steps for day
stepsperday <- aggregate(data$steps, by=list(data$date),sum,na.rm=T)
names(stepsperday)[1] <- "Day"
names(stepsperday)[2] <- "Steps"

#create a dataframe for total steps per interval
total_steps_per_interval <- aggregate(data$steps, by=list(data$interval),sum,na.rm=T)
names(total_steps_per_interval)[1] <- "Interval"
names(total_steps_per_interval)[2] <- "Total_Steps"

#create a dataframe for average steps per interval
avg_steps_per_interval <- aggregate(data$steps, by=list(data$interval),mean,na.rm=T)
names(avg_steps_per_interval)[1] <- "Interval"
names(avg_steps_per_interval)[2] <- "Average_Steps"

```

##Steps Per Day

Creates a histogram of stpes per day:
```{r}
library(ggplot2)
ggplot(data=stepsperday, aes(stepsperday$Steps)) + geom_histogram(col="red", fill= "green", binwidth = 2500) + labs(title="Number of Steps per Day") + labs(x="Steps per Day", y="Frequency")
```
Calculates the mean and median steps taken perday.
```{r}
stepmean <- mean(stepsperday$Steps)
stepmedian <- median(stepsperday$Steps)
```
The mean steps per day is `r stepmean`.

The median steps per day is `r stepmedian`.

##Steps per Interval

###Time Series Plot
Makes a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis):
```{r}
ggplot(avg_steps_per_interval, aes(Interval,Average_Steps)) + geom_line() + xlab("Interval") + ylab("Steps per Interval")
```
Finds the interval with the max number of average steps:
```{r}
max_interval <- avg_steps_per_interval[which.max(avg_steps_per_interval$Average_Steps), ]
```
The interval with the highest average steps is `r max_interval$Interval` with an average number of steps of `r max_interval$Average_Steps`.

##Inputing Missing Values
Calculates the number and percentage of missing values:
```{r}
library(scales)
complete <- nrow(data[complete.cases(data),])
incomplete <- nrow(data[!complete.cases(data),])
percentage <- percent(complete/nrow(data))
```
There are `r incomplete` rows with missing values and `r complete` complete rows.  `r percentage` rows have complete values.

Fill in missing data by using the average of previous and next observation
```{r}
step_interpolation <- function(rownumber){
  prevrow=rownumber;
  nextrow=rownumber;
  while(is.na(data$steps[prevrow])){
    prevrow=prevrow-1
    if(prevrow<1)return(mean(data[data$interval==data$interval[rownumber],"steps"],na.rm=TRUE))
  }
  while(is.na(data$steps[nextrow])){
    nextrow=nextrow+1
    if(nextrow>nrow(data))return(mean(data[data$interval==data$interval[rownumber],"steps"],na.rm=TRUE))
  }
  return(
    (data$steps[prevrow]+data$steps[nextrow])/2
  )
}

data2 <-data
for(n in 1:nrow(data2)){
  if(is.na(data2$steps[n])){
    data2$steps[n]=step_interpolation(n);
  }
}
```
Make Histogram:
```{r}
stepsperday2 <- stepsperday
stepsperday2 <- aggregate(data2$steps, by=list(data2$date),sum,na.rm=T)
names(stepsperday2)[1] <- "Day"
names(stepsperday2)[2] <- "Steps"
library(ggplot2)
ggplot(data=stepsperday2, aes(stepsperday2$Steps)) + geom_histogram(col="red", fill= "green", binwidth = 2500) + labs(title="Number of Steps per Day") + labs(x="Steps per Day", y="Frequency")
```
Recalculates the mean and median steps taken perday.
```{r}
stepmean <- mean(stepsperday$Steps)
stepmedian <- median(stepsperday$Steps)
stepmean2<- mean(stepsperday2$Steps)
stepmedian2<- median(stepsperday2$Steps)
```
The mean steps per day with NAs is `r stepmean`.
The mean steps per day without NAs is `r stepmean2`.

The median steps per day with NAs is `r stepmedian`.
The median steps per day without NAs is `r stepmedian2`.

##Weekdays vs Weekends